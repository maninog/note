{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMND1aefhCJpaNFqKH/azQ8"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"4yRmDfcSHuBw","executionInfo":{"status":"ok","timestamp":1688294314648,"user_tz":-540,"elapsed":1505,"user":{"displayName":"井ノ口学","userId":"08098431534337337835"}}},"outputs":[],"source":["import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import numpy as np\n","from scipy.stats import norm\n","from sklearn.preprocessing import StandardScaler\n","from scipy import stats\n","from scipy.stats import norm,skew\n","import warnings\n","warnings.filterwarnings('ignore')\n","%matplotlib inline\n","\n","#浮動小数点数の出力を小数点以下3桁に制限する\n","pd.set_option('display.float_format',lambda x:'{:.3f}'.format(x))"]},{"cell_type":"code","source":["#ドライブのマウント\n","from google.colab import drive\n","drive.mount('/content/drive')\n","INPUT_PATH_1 = \"/content/drive/My Drive/HousePrices/input/\"\n","INPUT_PATH_2 = \"/content/drive/My Drive/HousePrices/features/\"\n","\n","#train.csvをドライブをマウントした状態で読み込む\n","df_train = pd.read_csv(INPUT_PATH_1 + 'train.csv')\n","df_test = pd.read_csv(INPUT_PATH_1 + 'test.csv')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rbaU9w7hHx2A","executionInfo":{"status":"ok","timestamp":1688294332167,"user_tz":-540,"elapsed":17528,"user":{"displayName":"井ノ口学","userId":"08098431534337337835"}},"outputId":"e149cbfa-7c71-4fcf-8e4e-7bd4d58976cd"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["#サンプル数、特徴量のチェック\n","print('before droping Id:{}'.format(df_train.shape))\n","print('before droping Id:{}'.format(df_test.shape))\n","\n","#Idカラムだけのデータフレームを別に作成\n","train_ID = df_train['Id']\n","test_ID = df_test['Id']\n","\n","#Id列は予測処理に不要なので削除する。\n","df_train.drop('Id',axis=1,inplace=True)\n","df_test.drop('Id',axis=1,inplace=True)\n","\n","#サンプル数、特徴量を再チェック\n","print('after droping Id:{}'.format(df_train.shape))\n","print('after droping Id:{}'.format(df_test.shape))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sCwPF8ZnH3PB","executionInfo":{"status":"ok","timestamp":1688294332168,"user_tz":-540,"elapsed":16,"user":{"displayName":"井ノ口学","userId":"08098431534337337835"}},"outputId":"a429cfc0-c443-4440-b889-0438fcbde3e6"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["before droping Id:(1460, 81)\n","before droping Id:(1459, 80)\n","after droping Id:(1460, 80)\n","after droping Id:(1459, 79)\n"]}]},{"cell_type":"code","source":["# #GrLivArea＝リビングの広さとSalePriceの関係をplot.scatter（）散布図でみる。\n","# var = 'GrLivArea'\n","# data = pd.concat([df_train['SalePrice'],df_train[var]],axis=1)\n","# data.plot.scatter(x=var,y='SalePrice',ylim=(0,800000));\n","# plt.grid(True)"],"metadata":{"id":"FWiXaKHKISvg","executionInfo":{"status":"ok","timestamp":1688294333632,"user_tz":-540,"elapsed":7,"user":{"displayName":"井ノ口学","userId":"08098431534337337835"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["# df_train =df_train.drop(df_train[(df_train['GrLivArea']>4000)&(df_train['SalePrice']<200000)].index)\n","\n","# var = 'GrLivArea'\n","# data = pd.concat([df_train['SalePrice'],df_train[var]],axis=1)\n","# data.plot.scatter(x=var,y='SalePrice',ylim=(0,800000));\n","# plt.grid(True)"],"metadata":{"id":"EZ3KPzUcIa35","executionInfo":{"status":"ok","timestamp":1688294339881,"user_tz":-540,"elapsed":4,"user":{"displayName":"井ノ口学","userId":"08098431534337337835"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["# #SalePriceについてヒストグラムと正規分布図を表示\n","# sns.distplot(df_train['SalePrice'],fit=norm);\n","# fig = plt.figure()\n","# res = stats.probplot(df_train['SalePrice'],plot=plt)"],"metadata":{"id":"QdxhmYMuIdGg","executionInfo":{"status":"ok","timestamp":1688294414494,"user_tz":-540,"elapsed":4,"user":{"displayName":"井ノ口学","userId":"08098431534337337835"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["#対数変換した上でヒストグラムと分布図を表示\n","df_train['SalePrice'] = np.log1p(df_train['SalePrice'])\n","sns.distplot(df_train['SalePrice'], fit=norm);\n","fig = plt.figure()\n","res = stats.probplot(df_train['SalePrice'], plot=plt)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":904},"id":"IItjH_KIIf-y","executionInfo":{"status":"ok","timestamp":1688294438393,"user_tz":-540,"elapsed":1107,"user":{"displayName":"井ノ口学","userId":"08098431534337337835"}},"outputId":"63d23a25-ef75-4ac8-bc9f-3b483ec82d97"},"execution_count":8,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["#訓練データとテストデータを同じデータフレームに連結してみましょう。\n","ntrain = df_train.shape[0]\n","ntest = df_train.shape[0]\n","y_train = df_train.SalePrice.values\n","all_data = pd.concat((df_train,df_test)).reset_index(drop=True)\n","all_data.drop(['SalePrice'],axis=1,inplace=True)\n","print('all_data size:{}'.format(all_data.shape))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"h4hdrZFlIh5r","executionInfo":{"status":"ok","timestamp":1688294511109,"user_tz":-540,"elapsed":252,"user":{"displayName":"井ノ口学","userId":"08098431534337337835"}},"outputId":"c417210a-3450-4d3e-a49f-13c96476ada4"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["all_data size:(2917, 79)\n"]}]},{"cell_type":"code","source":["all_data.head(3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":237},"id":"jKoEBelAMci_","executionInfo":{"status":"ok","timestamp":1688294524872,"user_tz":-540,"elapsed":403,"user":{"displayName":"井ノ口学","userId":"08098431534337337835"}},"outputId":"c4eaaa26-163c-4b0d-906c-e7bf87c140e9"},"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   MSSubClass MSZoning  LotFrontage  LotArea Street Alley LotShape  \\\n","0          60       RL       65.000     8450   Pave   NaN      Reg   \n","1          20       RL       80.000     9600   Pave   NaN      Reg   \n","2          60       RL       68.000    11250   Pave   NaN      IR1   \n","\n","  LandContour Utilities LotConfig  ... ScreenPorch PoolArea PoolQC Fence  \\\n","0         Lvl    AllPub    Inside  ...           0        0    NaN   NaN   \n","1         Lvl    AllPub       FR2  ...           0        0    NaN   NaN   \n","2         Lvl    AllPub    Inside  ...           0        0    NaN   NaN   \n","\n","  MiscFeature MiscVal  MoSold  YrSold  SaleType  SaleCondition  \n","0         NaN       0       2    2008        WD         Normal  \n","1         NaN       0       5    2007        WD         Normal  \n","2         NaN       0       9    2008        WD         Normal  \n","\n","[3 rows x 79 columns]"],"text/html":["\n","  <div id=\"df-19c259b5-0f56-40fd-87f0-c8d8f94c357a\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>MSSubClass</th>\n","      <th>MSZoning</th>\n","      <th>LotFrontage</th>\n","      <th>LotArea</th>\n","      <th>Street</th>\n","      <th>Alley</th>\n","      <th>LotShape</th>\n","      <th>LandContour</th>\n","      <th>Utilities</th>\n","      <th>LotConfig</th>\n","      <th>...</th>\n","      <th>ScreenPorch</th>\n","      <th>PoolArea</th>\n","      <th>PoolQC</th>\n","      <th>Fence</th>\n","      <th>MiscFeature</th>\n","      <th>MiscVal</th>\n","      <th>MoSold</th>\n","      <th>YrSold</th>\n","      <th>SaleType</th>\n","      <th>SaleCondition</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>60</td>\n","      <td>RL</td>\n","      <td>65.000</td>\n","      <td>8450</td>\n","      <td>Pave</td>\n","      <td>NaN</td>\n","      <td>Reg</td>\n","      <td>Lvl</td>\n","      <td>AllPub</td>\n","      <td>Inside</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>2008</td>\n","      <td>WD</td>\n","      <td>Normal</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>20</td>\n","      <td>RL</td>\n","      <td>80.000</td>\n","      <td>9600</td>\n","      <td>Pave</td>\n","      <td>NaN</td>\n","      <td>Reg</td>\n","      <td>Lvl</td>\n","      <td>AllPub</td>\n","      <td>FR2</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>5</td>\n","      <td>2007</td>\n","      <td>WD</td>\n","      <td>Normal</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>60</td>\n","      <td>RL</td>\n","      <td>68.000</td>\n","      <td>11250</td>\n","      <td>Pave</td>\n","      <td>NaN</td>\n","      <td>IR1</td>\n","      <td>Lvl</td>\n","      <td>AllPub</td>\n","      <td>Inside</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>9</td>\n","      <td>2008</td>\n","      <td>WD</td>\n","      <td>Normal</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>3 rows × 79 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-19c259b5-0f56-40fd-87f0-c8d8f94c357a')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-19c259b5-0f56-40fd-87f0-c8d8f94c357a button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-19c259b5-0f56-40fd-87f0-c8d8f94c357a');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["all_data_na = (all_data.isnull().sum()/len(all_data))*100\n","all_data_na = all_data_na.drop(all_data_na[all_data_na == 0].index).sort_values(ascending=False)[:30]\n","missing_data = pd.DataFrame({'Missing Ratio':all_data_na})\n","missing_data"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":990},"id":"RLKPbmRmIlLq","executionInfo":{"status":"ok","timestamp":1688294564819,"user_tz":-540,"elapsed":221,"user":{"displayName":"井ノ口学","userId":"08098431534337337835"}},"outputId":"1fcb6997-c4d2-4e17-bd5a-07b2351def5c"},"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["              Missing Ratio\n","PoolQC               99.691\n","MiscFeature          96.400\n","Alley                93.212\n","Fence                80.425\n","FireplaceQu          48.680\n","LotFrontage          16.661\n","GarageFinish          5.451\n","GarageQual            5.451\n","GarageCond            5.451\n","GarageYrBlt           5.451\n","GarageType            5.382\n","BsmtExposure          2.811\n","BsmtCond              2.811\n","BsmtQual              2.777\n","BsmtFinType2          2.743\n","BsmtFinType1          2.708\n","MasVnrType            0.823\n","MasVnrArea            0.788\n","MSZoning              0.137\n","BsmtFullBath          0.069\n","BsmtHalfBath          0.069\n","Functional            0.069\n","Utilities             0.069\n","GarageArea            0.034\n","GarageCars            0.034\n","Electrical            0.034\n","KitchenQual           0.034\n","TotalBsmtSF           0.034\n","BsmtUnfSF             0.034\n","BsmtFinSF2            0.034"],"text/html":["\n","  <div id=\"df-d660104c-029f-467f-a33d-a1a75c63feb1\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Missing Ratio</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>PoolQC</th>\n","      <td>99.691</td>\n","    </tr>\n","    <tr>\n","      <th>MiscFeature</th>\n","      <td>96.400</td>\n","    </tr>\n","    <tr>\n","      <th>Alley</th>\n","      <td>93.212</td>\n","    </tr>\n","    <tr>\n","      <th>Fence</th>\n","      <td>80.425</td>\n","    </tr>\n","    <tr>\n","      <th>FireplaceQu</th>\n","      <td>48.680</td>\n","    </tr>\n","    <tr>\n","      <th>LotFrontage</th>\n","      <td>16.661</td>\n","    </tr>\n","    <tr>\n","      <th>GarageFinish</th>\n","      <td>5.451</td>\n","    </tr>\n","    <tr>\n","      <th>GarageQual</th>\n","      <td>5.451</td>\n","    </tr>\n","    <tr>\n","      <th>GarageCond</th>\n","      <td>5.451</td>\n","    </tr>\n","    <tr>\n","      <th>GarageYrBlt</th>\n","      <td>5.451</td>\n","    </tr>\n","    <tr>\n","      <th>GarageType</th>\n","      <td>5.382</td>\n","    </tr>\n","    <tr>\n","      <th>BsmtExposure</th>\n","      <td>2.811</td>\n","    </tr>\n","    <tr>\n","      <th>BsmtCond</th>\n","      <td>2.811</td>\n","    </tr>\n","    <tr>\n","      <th>BsmtQual</th>\n","      <td>2.777</td>\n","    </tr>\n","    <tr>\n","      <th>BsmtFinType2</th>\n","      <td>2.743</td>\n","    </tr>\n","    <tr>\n","      <th>BsmtFinType1</th>\n","      <td>2.708</td>\n","    </tr>\n","    <tr>\n","      <th>MasVnrType</th>\n","      <td>0.823</td>\n","    </tr>\n","    <tr>\n","      <th>MasVnrArea</th>\n","      <td>0.788</td>\n","    </tr>\n","    <tr>\n","      <th>MSZoning</th>\n","      <td>0.137</td>\n","    </tr>\n","    <tr>\n","      <th>BsmtFullBath</th>\n","      <td>0.069</td>\n","    </tr>\n","    <tr>\n","      <th>BsmtHalfBath</th>\n","      <td>0.069</td>\n","    </tr>\n","    <tr>\n","      <th>Functional</th>\n","      <td>0.069</td>\n","    </tr>\n","    <tr>\n","      <th>Utilities</th>\n","      <td>0.069</td>\n","    </tr>\n","    <tr>\n","      <th>GarageArea</th>\n","      <td>0.034</td>\n","    </tr>\n","    <tr>\n","      <th>GarageCars</th>\n","      <td>0.034</td>\n","    </tr>\n","    <tr>\n","      <th>Electrical</th>\n","      <td>0.034</td>\n","    </tr>\n","    <tr>\n","      <th>KitchenQual</th>\n","      <td>0.034</td>\n","    </tr>\n","    <tr>\n","      <th>TotalBsmtSF</th>\n","      <td>0.034</td>\n","    </tr>\n","    <tr>\n","      <th>BsmtUnfSF</th>\n","      <td>0.034</td>\n","    </tr>\n","    <tr>\n","      <th>BsmtFinSF2</th>\n","      <td>0.034</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d660104c-029f-467f-a33d-a1a75c63feb1')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-d660104c-029f-467f-a33d-a1a75c63feb1 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-d660104c-029f-467f-a33d-a1a75c63feb1');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["# f,ax = plt.subplots(figsize=(12,8))\n","# plt.xticks(rotation='90')\n","# sns.barplot(x=all_data_na.index,y=all_data_na)\n","# plt.xlabel('Features', fontsize=15)\n","# plt.ylabel('Percent of missing values', fontsize=15)\n","# plt.title('Percent missing data by feature', fontsize=15)"],"metadata":{"id":"CtOR_6AAInuq","executionInfo":{"status":"ok","timestamp":1688294572341,"user_tz":-540,"elapsed":3,"user":{"displayName":"井ノ口学","userId":"08098431534337337835"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["# #ヒートマップでみる\n","# corrmat = df_train.corr()\n","# fig, ax = plt.subplots(figsize=(12, 9))\n","# sns.heatmap(corrmat, vmax=.8, square=True);"],"metadata":{"id":"vu2BgropIx0A","executionInfo":{"status":"ok","timestamp":1688294576520,"user_tz":-540,"elapsed":23,"user":{"displayName":"井ノ口学","userId":"08098431534337337835"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["#欠損値の補完\n","#PoolQC : 「プールなし」。欠損値の割合が大きい（99％）ので、一般にプールがない家が多い。\n","all_data['PoolQC'] = all_data['PoolQC'].fillna('None')\n","\n","#MiscFeature : 「他のカテゴリーに含まれない雑多な機能」NAは \"misc feature \"なし\n","all_data[\"MiscFeature\"] = all_data[\"MiscFeature\"].fillna(\"None\")\n","\n","#Alley:「路地」 NAは路地へのアクセスなし\n","all_data[\"Alley\"] = all_data[\"Alley\"].fillna(\"None\")\n","\n","#Fence :「フェンス」 NAはフェンスがない\n","all_data[\"Fence\"] = all_data[\"Fence\"].fillna(\"None\")\n","\n","#FireplaceQu : 「暖炉」NAは \"暖炉なし \"を意味する。\n","all_data[\"FireplaceQu\"] = all_data[\"FireplaceQu\"].fillna(\"None\")\n","\n","#LotFrontage :「敷地に接続する道路の直線距離」家の敷地に接続する各ストリートの面積は、近隣の他の家と類似している可能性が高いため、近隣のLotFrontageの中央値で欠損値を埋める。\n","all_data['LotFrontage'] = all_data.groupby('Neighborhood')['LotFrontage'].transform(lambda x:x.fillna(x.median()))\n","\n","#GarageType、GarageFinish、GarageQual、GarageCond：欠損データをNoneに置き換える。\n","for col in ('GarageType', 'GarageFinish', 'GarageQual', 'GarageCond'):\n","    all_data[col] = all_data[col].fillna('None')\n","\n","#GarageYrBlt、GarageArea、GarageCars：欠損データを0に置き換える（ガレージなし＝車庫に車がないため）。\n","for col in ('GarageYrBlt', 'GarageArea', 'GarageCars'):\n","    all_data[col] = all_data[col].fillna(0)\n","\n","#BsmtFinSF1、BsmtFinSF2、BsmtUnfSF、TotalBsmtSF、BsmtFullBath、BsmtHalfBath ：欠損値は地下室がないためゼロと思われる。よって０を埋める。\n","for col in ('BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF','TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath'):\n","    all_data[col] = all_data[col].fillna(0)\n","\n","#BsmtQual、BsmtCond、BsmtExposure、BsmtFinType1、BsmtFinType2 ：欠損値は地下室がないためゼロと思われる。よって０を埋める。\n","for col in ('BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2'):\n","    all_data[col] = all_data[col].fillna('None')\n","\n","#MasVnrArea,MasVnrType。NAは、これらの家屋にベニヤがないことを意味している。面積は0、タイプはNoneを代入\n","all_data[\"MasVnrType\"] = all_data[\"MasVnrType\"].fillna(\"None\")\n","all_data[\"MasVnrArea\"] = all_data[\"MasVnrArea\"].fillna(0)\n","\n","#MSZoning :「一般的なゾーニング区分」 'RL'が圧倒的に多い値です。だから、'RL'で埋める。\n","all_data['MSZoning'] = all_data['MSZoning'].fillna(all_data['MSZoning'].mode()[0])\n","\n","#Utilities は削除\n","all_data = all_data.drop(['Utilities'], axis=1)\n","\n","#Functional :「家庭用機能性評価」 Typを入れる。\n","all_data[\"Functional\"] = all_data[\"Functional\"].fillna(\"Typ\")\n","\n","#Electrical : ほとんど'SBrkr'であるため、欠損値にはそれを設定。\n","all_data['Electrical'] = all_data['Electrical'].fillna(all_data['Electrical'].mode()[0])\n","\n","#KitchenQual: Electricalと同様、KitchenQualの欠損値には最も頻度の高い「TA」を設定\n","all_data['KitchenQual'] = all_data['KitchenQual'].fillna(all_data['KitchenQual'].mode()[0])\n","\n","#Exterior1st,Exterior2nd : 最も頻度の高いもので設定\n","all_data['Exterior1st'] = all_data['Exterior1st'].fillna(all_data['Exterior1st'].mode()[0])\n","all_data['Exterior2nd'] = all_data['Exterior2nd'].fillna(all_data['Exterior2nd'].mode()[0])\n","\n","#SaleType : 最も頻度の高いもので設定\n","all_data['SaleType'] = all_data['SaleType'].fillna(all_data['SaleType'].mode()[0])\n","\n","#MSSubClass : 「ビルディングクラス」　欠損値をNoneに置き換えることができる\n","all_data['MSSubClass'] = all_data['MSSubClass'].fillna(\"None\")"],"metadata":{"id":"2uqBUGphI0vZ","executionInfo":{"status":"ok","timestamp":1688294605062,"user_tz":-540,"elapsed":221,"user":{"displayName":"井ノ口学","userId":"08098431534337337835"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["all_data_na = (all_data.isnull().sum()/len(all_data))*100\n","all_data_na = all_data_na.drop(all_data_na[all_data_na==0].index).sort_values(ascending=False)\n","missing_data = pd.DataFrame({'Missing Ratio' :all_data_na})\n","missing_data.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":49},"id":"HotxMwmGI4m7","executionInfo":{"status":"ok","timestamp":1688294613260,"user_tz":-540,"elapsed":249,"user":{"displayName":"井ノ口学","userId":"08098431534337337835"}},"outputId":"628cdb49-c53f-4461-bf16-798a63da9f0a"},"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Empty DataFrame\n","Columns: [Missing Ratio]\n","Index: []"],"text/html":["\n","  <div id=\"df-e4f2213d-7e74-4079-ba24-470225cdbcc6\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Missing Ratio</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e4f2213d-7e74-4079-ba24-470225cdbcc6')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-e4f2213d-7e74-4079-ba24-470225cdbcc6 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-e4f2213d-7e74-4079-ba24-470225cdbcc6');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["#MSSubClassはビルディングクラスなので変換\n","all_data['MSSubClass'] = all_data['MSSubClass'].apply(str)\n","\n","#OverallCondをカテゴリ変数に変更する\n","all_data['OverallCond'] = all_data['OverallCond'].astype(str)\n","\n","#販売された年と月も変換\n","all_data['YrSold'] = all_data['YrSold'].astype(str)\n","all_data['MoSold'] = all_data['MoSold'].astype(str)"],"metadata":{"id":"s6QDH76gI7iC","executionInfo":{"status":"ok","timestamp":1688294638845,"user_tz":-540,"elapsed":5,"user":{"displayName":"井ノ口学","userId":"08098431534337337835"}}},"execution_count":16,"outputs":[]},{"cell_type":"code","source":["#all_data['YrSold'].value_counts()"],"metadata":{"id":"GXq60mjhNGIi","executionInfo":{"status":"ok","timestamp":1688294691051,"user_tz":-540,"elapsed":4,"user":{"displayName":"井ノ口学","userId":"08098431534337337835"}}},"execution_count":19,"outputs":[]},{"cell_type":"code","source":["#all_data.info()"],"metadata":{"id":"1zTXzxJdM7wQ","executionInfo":{"status":"ok","timestamp":1688294850443,"user_tz":-540,"elapsed":343,"user":{"displayName":"井ノ口学","userId":"08098431534337337835"}}},"execution_count":20,"outputs":[]},{"cell_type":"code","source":["from sklearn.preprocessing import LabelEncoder\n","cols = ('FireplaceQu', 'BsmtQual', 'BsmtCond', 'GarageQual', 'GarageCond',\n","        'ExterQual', 'ExterCond','HeatingQC', 'PoolQC', 'KitchenQual', 'BsmtFinType1',\n","        'BsmtFinType2', 'Functional', 'Fence', 'BsmtExposure', 'GarageFinish', 'LandSlope',\n","        'LotShape', 'PavedDrive', 'Street', 'Alley', 'CentralAir', 'MSSubClass', 'OverallCond',\n","        'YrSold', 'MoSold')\n","\n","for c in cols:\n","    lbl = LabelEncoder()\n","    lbl.fit(list(all_data[c].values))\n","    all_data[c] = lbl.transform(list(all_data[c].values))"],"metadata":{"id":"0_o2VrU_I_mz","executionInfo":{"status":"ok","timestamp":1688295035111,"user_tz":-540,"elapsed":294,"user":{"displayName":"井ノ口学","userId":"08098431534337337835"}}},"execution_count":21,"outputs":[]},{"cell_type":"code","source":["all_data['TotalSF'] = all_data['TotalBsmtSF']+all_data['1stFlrSF']+all_data['2ndFlrSF']"],"metadata":{"id":"Q23o8MNoJGmZ","executionInfo":{"status":"ok","timestamp":1688295035382,"user_tz":-540,"elapsed":7,"user":{"displayName":"井ノ口学","userId":"08098431534337337835"}}},"execution_count":22,"outputs":[]},{"cell_type":"code","source":["# numeric_feats = all_data.dtypes[all_data.dtypes != 'object'].index\n","# skewed_feats = all_data[numeric_feats].apply(lambda x:skew(x.dropna())).sort_values(ascending=False)\n","# skewness = pd.DataFrame({'Skew':skewed_feats})\n","# skewness.head(10)"],"metadata":{"id":"jetxWCA-JJQw","executionInfo":{"status":"ok","timestamp":1688295111963,"user_tz":-540,"elapsed":223,"user":{"displayName":"井ノ口学","userId":"08098431534337337835"}}},"execution_count":23,"outputs":[]},{"cell_type":"code","source":["# skewness = skewness[abs(skewness)>0.75]\n","# from scipy.special import boxcox1p\n","# skewed_features = skewness.index\n","# lam = 0.15\n","# for feat in skewed_features:\n","#     #all_data[feat] += 1\n","#     all_data[feat] = boxcox1p(all_data[feat], lam)"],"metadata":{"id":"zhL6_642JLCS","executionInfo":{"status":"ok","timestamp":1688295114802,"user_tz":-540,"elapsed":7,"user":{"displayName":"井ノ口学","userId":"08098431534337337835"}}},"execution_count":24,"outputs":[]},{"cell_type":"code","source":["all_data = pd.get_dummies(all_data)"],"metadata":{"id":"oJbK2gtsJNAp","executionInfo":{"status":"ok","timestamp":1688295117985,"user_tz":-540,"elapsed":239,"user":{"displayName":"井ノ口学","userId":"08098431534337337835"}}},"execution_count":25,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"k7W5qklrJPLQ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#新しい訓練データとテストデータをセットする\n","train = all_data[:ntrain]\n","test = all_data[ntrain:]"],"metadata":{"id":"ZWDudCNnJP4a","executionInfo":{"status":"ok","timestamp":1688295119989,"user_tz":-540,"elapsed":10,"user":{"displayName":"井ノ口学","userId":"08098431534337337835"}}},"execution_count":26,"outputs":[]},{"cell_type":"code","source":["#ライブラリのインポート\n","from sklearn.linear_model import ElasticNet,Lasso,BayesianRidge,LassoLarsIC\n","from sklearn.ensemble import RandomForestRegressor,GradientBoostingRegressor\n","from sklearn.kernel_ridge import KernelRidge\n","from sklearn.pipeline import make_pipeline\n","from sklearn.preprocessing import RobustScaler\n","from sklearn.base import BaseEstimator,TransformerMixin,RegressorMixin,clone\n","from sklearn.model_selection import KFold,cross_val_score,train_test_split\n","from sklearn.metrics import mean_squared_error\n","import xgboost as xgb\n","import lightgbm as lgb"],"metadata":{"id":"XVJLdAcdJU4a","executionInfo":{"status":"ok","timestamp":1688295122538,"user_tz":-540,"elapsed":1374,"user":{"displayName":"井ノ口学","userId":"08098431534337337835"}}},"execution_count":27,"outputs":[]},{"cell_type":"code","source":["n_folds = 5\n","\n","def rmsle_cv(model):\n","    kf = KFold(n_folds, shuffle=True, random_state=12345).get_n_splits(train.values) #42\n","    rmse= np.sqrt(-cross_val_score(model, train.values, y_train, scoring=\"neg_mean_squared_error\", cv = kf))\n","    return(rmse)"],"metadata":{"id":"TXMjvipqJXra","executionInfo":{"status":"ok","timestamp":1688295184512,"user_tz":-540,"elapsed":225,"user":{"displayName":"井ノ口学","userId":"08098431534337337835"}}},"execution_count":34,"outputs":[]},{"cell_type":"code","source":["#LASSO回帰\n","lasso = make_pipeline(RobustScaler(),Lasso(random_state=12345)) # 1\n","#lasso = make_pipeline(RobustScaler(),Lasso(alpha=0.0005,random_state=12345)) # 1"],"metadata":{"id":"0-A42tf5JZo_","executionInfo":{"status":"ok","timestamp":1688296159499,"user_tz":-540,"elapsed":5,"user":{"displayName":"井ノ口学","userId":"08098431534337337835"}}},"execution_count":58,"outputs":[]},{"cell_type":"code","source":["#Elastic Net\n","ENet = make_pipeline(RobustScaler(),ElasticNet(random_state=12345))\n","#ENet = make_pipeline(RobustScaler(),ElasticNet(alpha=0.0005,l1_ratio=.9,random_state=3))"],"metadata":{"id":"VqZKYohoJbnw","executionInfo":{"status":"ok","timestamp":1688296127535,"user_tz":-540,"elapsed":17,"user":{"displayName":"井ノ口学","userId":"08098431534337337835"}}},"execution_count":56,"outputs":[]},{"cell_type":"code","source":["# カーネルリッジ回帰\n","KRR = KernelRidge()\n","#KRR = KernelRidge(alpha=0.6,kernel='polynomial',degree=2,coef0=2.5)"],"metadata":{"id":"4pv502yAJdoa","executionInfo":{"status":"ok","timestamp":1688296107036,"user_tz":-540,"elapsed":8,"user":{"displayName":"井ノ口学","userId":"08098431534337337835"}}},"execution_count":54,"outputs":[]},{"cell_type":"code","source":["GBoost = GradientBoostingRegressor(random_state=12345)\n","#GBoost = GradientBoostingRegressor(n_estimators=3000,learning_rate=0.05,max_depth=4,max_features='sqrt',min_samples_leaf=15,min_samples_split=10,loss='huber',random_state=5)"],"metadata":{"id":"NQQ0G22cJiMk","executionInfo":{"status":"ok","timestamp":1688296078639,"user_tz":-540,"elapsed":377,"user":{"displayName":"井ノ口学","userId":"08098431534337337835"}}},"execution_count":52,"outputs":[]},{"cell_type":"code","source":["model_xgb = xgb.XGBRegressor(random_state=12345)\n","# model_xgb = xgb.XGBRegressor(colsample_bytree=0.4603, gamma=0.0468,\n","#                              learning_rate=0.05, max_depth=3,\n","#                              min_child_weight=1.7817, n_estimators=2200,\n","#                              reg_alpha=0.4640, reg_lambda=0.8571,\n","#                              subsample=0.5213, silent=1,\n","#                              random_state =7, nthread = -1)"],"metadata":{"id":"TgcbnhL_Jkah","executionInfo":{"status":"ok","timestamp":1688295999180,"user_tz":-540,"elapsed":334,"user":{"displayName":"井ノ口学","userId":"08098431534337337835"}}},"execution_count":50,"outputs":[]},{"cell_type":"code","source":["model_lgb = lgb.LGBMRegressor(random_state=12345) #\n","#model_lgb = lgb.LGBMRegressor(objective='regression',num_leaves=5,\n","#                               learning_rate=0.05, n_estimators=720,\n","#                               max_bin = 55, bagging_fraction = 0.8,\n","#                               bagging_freq = 5, feature_fraction = 0.2319,\n","#                               feature_fraction_seed=9, bagging_seed=9,\n","#                               min_data_in_leaf =6, min_sum_hessian_in_leaf = 11)"],"metadata":{"id":"QJdjrpsRJn7R","executionInfo":{"status":"ok","timestamp":1688295942580,"user_tz":-540,"elapsed":6,"user":{"displayName":"井ノ口学","userId":"08098431534337337835"}}},"execution_count":47,"outputs":[]},{"cell_type":"code","source":["#クロスバリデーションのrmsle誤差を評価することで、これらの基本モデルがデータ上でどのように機能するかを見てみよう。\n","score = rmsle_cv(lasso)\n","print('Lasso score:{:.4f}({:.4f})'.format(score.mean(), score.std()))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8qFUBux4Juij","executionInfo":{"status":"ok","timestamp":1688296163169,"user_tz":-540,"elapsed":309,"user":{"displayName":"井ノ口学","userId":"08098431534337337835"}},"outputId":"4f05aebd-1a80-454c-aa37-ed5221f76799"},"execution_count":59,"outputs":[{"output_type":"stream","name":"stdout","text":["Lasso score:0.3828(0.0156)\n"]}]},{"cell_type":"code","source":["score = rmsle_cv(ENet)\n","print('ElasticNet score:{:.4f}({:.4f})'.format(score.mean(), score.std()))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5OpIJDGvKKdS","executionInfo":{"status":"ok","timestamp":1688296133783,"user_tz":-540,"elapsed":387,"user":{"displayName":"井ノ口学","userId":"08098431534337337835"}},"outputId":"c6d0b102-342c-4811-9356-73ac61bfbbc2"},"execution_count":57,"outputs":[{"output_type":"stream","name":"stdout","text":["ElasticNet score:0.3738(0.0148)\n"]}]},{"cell_type":"code","source":["score = rmsle_cv(KRR)\n","print('Kernel Ridge score:{:.4f}({:.4f})'.format(score.mean(), score.std()))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yBKt4EcRKV0R","executionInfo":{"status":"ok","timestamp":1688296110797,"user_tz":-540,"elapsed":410,"user":{"displayName":"井ノ口学","userId":"08098431534337337835"}},"outputId":"e9aa19ee-6612-4645-c809-50c8d54bd45b"},"execution_count":55,"outputs":[{"output_type":"stream","name":"stdout","text":["Kernel Ridge score:0.1206(0.0104)\n"]}]},{"cell_type":"code","source":["score = rmsle_cv(GBoost)\n","print('Gradient Boosting score:{:.4f}({:.4f})'.format(score.mean(), score.std()))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wZ7F3qMoKYAp","executionInfo":{"status":"ok","timestamp":1688296092035,"user_tz":-540,"elapsed":3924,"user":{"displayName":"井ノ口学","userId":"08098431534337337835"}},"outputId":"a4d4a29e-1697-4e0e-edbc-3bb14402c575"},"execution_count":53,"outputs":[{"output_type":"stream","name":"stdout","text":["Gradient Boosting score:0.1212(0.0063)\n"]}]},{"cell_type":"code","source":["score = rmsle_cv(model_xgb)\n","print('Xgboost score:{:.4f}({:.4f})'.format(score.mean(), score.std()))"],"metadata":{"id":"BeB94fUtKaqz","executionInfo":{"status":"ok","timestamp":1688296009447,"user_tz":-540,"elapsed":6333,"user":{"displayName":"井ノ口学","userId":"08098431534337337835"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"f2947af1-752e-467b-e184-1a441cf46e7b"},"execution_count":51,"outputs":[{"output_type":"stream","name":"stdout","text":["Xgboost score:0.1311(0.0077)\n"]}]},{"cell_type":"code","source":["score = rmsle_cv(model_lgb)\n","print('LGBM score:{:.4f}({:.4f})'.format(score.mean(), score.std()))"],"metadata":{"id":"1SonvbEXKcdi","executionInfo":{"status":"ok","timestamp":1688295953470,"user_tz":-540,"elapsed":879,"user":{"displayName":"井ノ口学","userId":"08098431534337337835"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"20bc9811-d923-45fd-9fb9-035e0bfdb587"},"execution_count":48,"outputs":[{"output_type":"stream","name":"stdout","text":["LGBM score:0.1275(0.0051)\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"CCxuT8beKfVb"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#ベースとなるモデルの平均化\n","class AveragingModels(BaseEstimator, RegressorMixin, TransformerMixin):\n","    def __init__(self, models):\n","        self.models = models\n","\n","    # 元のモデルのクローンを定義\n","    def fit(self, X, y):\n","        self.models_ = [clone(x) for x in self.models]\n","\n","        # クローン化したベースモデルの学習\n","        for model in self.models_:\n","            model.fit(X, y)\n","\n","        return self\n","\n","    #クローン化したモデルの予測を行い、平均化\n","    def predict(self, X):\n","        predictions = np.column_stack([\n","            model.predict(X) for model in self.models_\n","        ])\n","        return np.mean(predictions, axis=1)"],"metadata":{"id":"ZFwH_Ls4KiX-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#ベースとなるモデルの平均化のスコア\n","averaged_models = AveragingModels(models = (ENet, GBoost, KRR, lasso))\n","\n","score = rmsle_cv(averaged_models)\n","print('Averaged base models score:{:.4f}({:.4f})'.format(score.mean(), score.std()))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cXp8ECmhKi7B","executionInfo":{"status":"ok","timestamp":1688294173893,"user_tz":-540,"elapsed":91671,"user":{"displayName":"井ノ口学","userId":"08098431534337337835"}},"outputId":"ed32fe37-f929-483a-d425-de9c327a4c80"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Averaged base models score:0.1087(0.0077)\n"]}]},{"cell_type":"code","source":["#平均化モデルのスタッキング\n","class StackingAveragedModels(BaseEstimator, RegressorMixin, TransformerMixin):\n","    def __init__(self, base_models, meta_model, n_folds=5):\n","        self.base_models = base_models\n","        self.meta_model = meta_model\n","        self.n_folds = n_folds\n","\n","    def fit(self, X, y):\n","        self.base_models_ = [list() for x in self.base_models]\n","        self.meta_model_ = clone(self.meta_model)\n","        kfold = KFold(n_splits=self.n_folds, shuffle=True, random_state=156)\n","\n","\n","        out_of_fold_predictions = np.zeros((X.shape[0], len(self.base_models)))\n","        for i, model in enumerate(self.base_models):\n","            for train_index, holdout_index in kfold.split(X, y):\n","                instance = clone(model)\n","                self.base_models_[i].append(instance)\n","                instance.fit(X[train_index], y[train_index])\n","                y_pred = instance.predict(X[holdout_index])\n","                out_of_fold_predictions[holdout_index, i] = y_pred\n","\n","        self.meta_model_.fit(out_of_fold_predictions, y)\n","        return self\n","\n","    def predict(self, X):\n","        meta_features = np.column_stack([\n","            np.column_stack([model.predict(X) for model in base_models]).mean(axis=1)\n","            for base_models in self.base_models_ ])\n","        return self.meta_model_.predict(meta_features)"],"metadata":{"id":"aR3qN0M8KlH4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#平均化モデルのスタッキングのスコア\n","stacked_averaged_models = StackingAveragedModels(base_models = (ENet, GBoost, KRR),\n","                                                 meta_model = lasso)\n","\n","score = rmsle_cv(stacked_averaged_models)\n","print('Stacking　Averaged base models score:{:.4f}({:.4f})'.format(score.mean(), score.std()))"],"metadata":{"id":"rdtatj8WKnrg"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#StackedRegressor、XGBoost、LightGBMのアンサンブル\n","def rmsle(y,y_pred):\n","    return np.sqrt(mean_squared_error(y,y_pred))"],"metadata":{"id":"Zezr3fuuKpeS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#最終学習と予測\n","#StackedRegressor:\n","stacked_averaged_models.fit(train.values,y_train)\n","stacked_train_pred = stacked_averaged_models.predict(train.values)\n","stacked_pred = np.expm1(stacked_averaged_models.predict(test.values))\n","print(rmsle(y_train,stacked_train_pred))"],"metadata":{"id":"tAH_QHOkKrhA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#XGBoost:\n","model_xgb.fit(train,y_train)\n","xgb_train_pred = model_xgb.predict(train)\n","xgb_pred = np.expm1(model_xgb.predict(test))\n","print(rmsle(y_train,xgb_train_pred))"],"metadata":{"id":"HQdWQ6HDKtOi"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#LightGBM:\n","model_lgb.fit(train,y_train)\n","lgb_train_pred = model_lgb.predict(train)\n","lgb_pred = np.expm1(model_lgb.predict(test.values))\n","print(rmsle(y_train,lgb_train_pred))"],"metadata":{"id":"j94N4KnqKuzA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#平均化した場合のTrainデータ全体のRMSE\n","print('RMSLE score on train data:')\n","print(rmsle(y_train,stacked_train_pred*0.70 +\n","               xgb_train_pred*0.15 + lgb_train_pred*0.15 ))"],"metadata":{"id":"FW517lEUKwaB"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#アンサンブル予測\n","ensemble = stacked_pred*0.70 + xgb_pred*0.15 + lgb_pred*0.15"],"metadata":{"id":"IEe1Mk70KyZh"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#ファイル提出\n","sub = pd.DataFrame()\n","sub['Id'] = test_ID\n","sub['SalePrice'] = ensemble\n","sub.to_csv(OUTPUT_PATH + 'submission3.csv',index=False)"],"metadata":{"id":"OK-yg9W1K0Yx"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"G8hUsFoBK4x4"},"execution_count":null,"outputs":[]}]}